import pandas as pd
import matplotlib.pyplot as plt
from google.cloud import bigquery
import configparser
from google.cloud import bigquery_storage
import os, sys
import datetime as dt
import pickle
import plotly.express as px
import kaleido
import numpy as np

pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

config_path = '../config.ini'
config = configparser.ConfigParser()
config.read(config_path)

project_id = "freestar-157323"
client = bigquery.Client(project=project_id)
bqstorageclient = bigquery_storage.BigQueryReadClient()

def get_data(query_filename, data_cache_filename=None, force_requery=False, repl_dict={}):

    if data_cache_filename is None:
        data_cache_filename = query_filename
    data_cache_filename_full = f'data_cache/{data_cache_filename}.pkl'

    if not force_requery and os.path.exists(data_cache_filename_full):
        print(f'found existing data file, loading {data_cache_filename_full}')
        with open(data_cache_filename_full, 'rb') as f:
            df = pickle.load(f)
        return df

    query = open(os.path.join(sys.path[0], f"queries/{query_filename}.sql"), "r").read()
    df = get_bq_data(query, repl_dict)

    with open(data_cache_filename_full, 'wb') as f:
        pickle.dump(df, f)
    return df

def get_bq_data(query, replacement_dict={}):
    for k, v in replacement_dict.items():
        query = query.replace("{" + k + "}", str(v))
    return client.query(query).result().to_dataframe(bqstorage_client=bqstorageclient, progress_bar_type='tqdm')

def main_plot():
    force_requery = False

    dt_end = dt.datetime(2025, 7, 2, 10, 0, 0)
    data_hours = 12

    START_UNIX_TIME_MS = str(int(dt.datetime.timestamp(dt_end - dt.timedelta(hours=data_hours)) * 1000))
    END_UNIX_TIME_MS = str(int(dt.datetime.timestamp(dt_end) * 1000))

    print(f'{START_UNIX_TIME_MS} < server_time and server_time < {END_UNIX_TIME_MS}')

    repl_dict = {'START_UNIX_TIME_MS': START_UNIX_TIME_MS, 'END_UNIX_TIME_MS': END_UNIX_TIME_MS}
    df = get_data('query_price_pressure',
                  f'query_price_pressurere_{START_UNIX_TIME_MS}_{END_UNIX_TIME_MS}',
                  repl_dict=repl_dict, force_requery=force_requery).set_index('bid_rank')

    fig, ax = plt.subplots(figsize=(12, 9))
    fig.suptitle('Price Pressure Generated by Prebid Bidder Depth')

    for bid_rank, df_ in df.iterrows():
        pp = df_['price_pressure_when_bid_made_quantiles']
        cumprop = np.arange(0, len(pp)) / (len(pp) - 1)
        bp = df_['bid_participation']
        cumprop_with_bp = (1 - bp) + bp * cumprop
        df_p2 = pd.DataFrame(100*pp, index=pd.Index(100*cumprop_with_bp), columns=[bid_rank])
        df_p2.plot(ax=ax, xlabel='Percentage of Auctions', ylabel='Percentage Price Pressure')

    fig.savefig('plots/prebid_price_price_presssure_bid_depth.png')


def main_dash(version_number=3):
    # datelist = pd.date_range(end=dt.datetime.today().date() - dt.timedelta(days=3), periods=10)
    # first_row = True

    datelist = pd.date_range(start=dt.date(2025, 7, 13), end=dt.date(2025, 7, 14))
    first_row = False

    query_filename = f"queries/query_price_pressure_dash_{version_number}.sql"
    query = open(os.path.join(sys.path[0], query_filename), "r").read()
    print(f'query_filename: {query_filename}')


    for date in datelist.tolist():
        print(f'date: {date}')

        tablename = f"streamamp-qa-239417.DAS_increment.concurrent_test_{version_number}_X"
        create_or_insert_statement = f"CREATE OR REPLACE TABLE `{tablename}` as" if first_row else f"insert into `{tablename}`"
        create_or_insert_statement_1 = f"CREATE OR REPLACE TABLE `{tablename}" if first_row else f"insert into `{tablename}"
        create_or_insert_statement_2 = f"` as" if first_row else f"`"
        first_row = False

        START_UNIX_TIME_MS = str(int(dt.datetime.timestamp(date) * 1000))
        END_UNIX_TIME_MS = str(int(dt.datetime.timestamp(date + dt.timedelta(days=1)) * 1000))

        print(f'{START_UNIX_TIME_MS} < server_time and server_time < {END_UNIX_TIME_MS}')

        repl_dict = {'START_UNIX_TIME_MS': START_UNIX_TIME_MS, 'END_UNIX_TIME_MS': END_UNIX_TIME_MS,
                     'date': date.strftime('%Y-%m-%d'),
                     'create_or_insert_statement_1': create_or_insert_statement_1,
                     'create_or_insert_statement_2': create_or_insert_statement_2,
                     'create_or_insert_statement': create_or_insert_statement}
        get_bq_data(query, repl_dict)

if __name__ == "__main__":
    #main_plot()

    main_dash(3)
    main_dash(2)