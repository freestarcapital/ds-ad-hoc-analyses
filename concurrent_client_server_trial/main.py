import pandas as pd
import matplotlib.pyplot as plt
from google.cloud import bigquery
import configparser
from google.cloud import bigquery_storage
import os, sys
import datetime
import pickle
import plotly.express as px
import kaleido
import numpy as np

pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

config_path = '../config.ini'
config = configparser.ConfigParser()
config.read(config_path)

project_id = "freestar-157323"
client = bigquery.Client(project=project_id)
bqstorageclient = bigquery_storage.BigQueryReadClient()

def get_data(query_filename, data_cache_filename=None, force_requery=False, repl_dict = {}):

    if data_cache_filename is None:
        data_cache_filename = query_filename
    data_cache_filename_full = f'data_cache/{data_cache_filename}.pkl'

    if not force_requery and os.path.exists(data_cache_filename_full):
        print(f'found existing data file, loading {data_cache_filename_full}')
        with open(data_cache_filename_full, 'rb') as f:
            df = pickle.load(f)
        return df

    query = open(os.path.join(sys.path[0], f"queries/{query_filename}.sql"), "r").read()
    df = get_bq_data(query, repl_dict)

    with open(data_cache_filename_full, 'wb') as f:
        pickle.dump(df, f)
    return df

def get_bq_data(query, replacement_dict={}):
    for k, v in replacement_dict.items():
        query = query.replace(f"<{k}>", str(v))
    return client.query(query).result().to_dataframe(bqstorage_client=bqstorageclient, progress_bar_type='tqdm')

def main():
    force_requery = True

    dt_end = datetime.datetime(2025, 7, 2, 10, 0, 0)
    data_hours = 12

    START_UNIX_TIME_MS = str(int(datetime.datetime.timestamp(dt_end - datetime.timedelta(hours=data_hours)) * 1000))
    END_UNIX_TIME_MS = str(int(datetime.datetime.timestamp(dt_end) * 1000))

    print(f'{START_UNIX_TIME_MS} < server_time and server_time < {END_UNIX_TIME_MS}')

    repl_dict = {}
    df = get_data('query_price_pressure',
                  f'query_price_pressurere_{START_UNIX_TIME_MS}_{END_UNIX_TIME_MS}',
                  pl_dict=repl_dict, force_requery=force_requery).set_index('bid_rank')

#    fig, ax = plt.subplots(figsize=(12, 9))
    fig2, ax2 = plt.subplots(figsize=(12, 9))
    fig2.suptitle('Price Pressure Generated by Prebid Bidder Depth')

    for bid_rank, df_ in df.iterrows():
        pp = df_['price_pressure_when_bid_made_quantiles']
        # df_p = pd.DataFrame(np.arange(0, len(pp)) / (len(pp) - 1), index=pd.Index(pp), columns=[bid_rank])
        # df_p.plot(ax=ax)
        cumprop = np.arange(0, len(pp)) / (len(pp) - 1)
        bp = df_['bid_participation']
        cumprop_with_bp = (1 - bp) + bp * cumprop
        df_p2 = pd.DataFrame(100*pp, index=pd.Index(100*cumprop_with_bp), columns=[bid_rank])
        df_p2.plot(ax=ax2, xlabel='Percentage of Auctions', ylabel='Percentage Price Pressure')

#    fig.savefig('plots/plot1.png')
    fig2.savefig('plots/plot2_qualify.png')

if __name__ == "__main__":
    main()